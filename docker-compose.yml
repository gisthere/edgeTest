version: "3.7"

services:
  sensor:
    build: sensor/
    deploy:
      replicas: 8
    volumes:
      - ./sensor/:/app
    depends_on:
      - controller
  manipulator:
    build: manipulator/
    volumes:
      - ./manipulator/:/app

  web:
    build: webServer/
    command: bash -c "python manage.py create_tables && python manage.py runserver"
    volumes:
      - ./webServer:/app
    ports:
      - 80:5000
    depends_on:
      - web-db


  controller-db:
    image: postgres:10.4-alpine
    environment:
      POSTGRES_DB: "main"
      POSTGRES_USER: "main"
      POSTGRES_PASSWORD: "main"
    restart: "no"
    volumes:
      - "controller-db:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready U postgres"]
      interval: 30s
      timeout: 30s
      retries: 3


  web-db:
    image: postgres:10.4-alpine
    environment:
      POSTGRES_DB: "web"
      POSTGRES_USER: "web"
      POSTGRES_PASSWORD: "web"
    restart: "no"
    volumes:
      - "web-db:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready U postgres"]
      interval: 30s
      timeout: 30s
      retries: 3


  controller-redis:
    image: 'redis:3.2.0-alpine'
    restart: "no"

  controller-celery-worker:
    build: controller/
    command: celery -A app.celery worker -l info --concurrency=16
    restart: "no"
    deploy:
      replicas: 8
    volumes:
      - ./controller:/app
    depends_on:
      - controller-redis
      - manipulator
      - web

  controller-celery-beat:
    build: controller/
    command: bash -c "rm -f /opt/celeryd.pid && celery -A app.celery beat -l info --max-interval 1 --pidfile=/opt/celeryd.pid"
    volumes:
      - ./controller:/app
    depends_on:
      - controller-redis

  controller:
    build: controller/
    command: bash -c "python manage.py create_tables && python manage.py runserver"
    volumes:
      - ./controller/:/app
    depends_on:
      - controller-db
      - controller-redis
      - web

volumes:
  controller-db:
  web-db: